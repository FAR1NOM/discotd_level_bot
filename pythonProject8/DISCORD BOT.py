import discord
from discord.ext import commands
from discord import app_commands
import time
import json
import os
import math

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "YOUR_TOKEN_HERE"
CHANNEL_ID = YOUR_CHANNEL_ID  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º–∏
intents = discord.Intents.default()
intents.messages = True
intents.guilds = True
intents.members = True
intents.message_content = True
intents.voice_states = True

bot = commands.Bot(command_prefix="!", intents=intents)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "user_data.json"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_data = {}

# –£—Ä–æ–≤–Ω–∏ –∏ –∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
LEVELS = {
    1: {"messages": 5, "voice_time": 10},
    2: {"messages": 10, "voice_time": 30},
    3: {"messages": 20, "voice_time": 60},
    10: {"messages": 50, "voice_time": 600},
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    global user_data
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as file:
            raw_data = json.load(file)
            user_data = {int(key): value for key, value in raw_data.items()}
    else:
        user_data = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump({str(key): value for key, value in user_data.items()}, file, ensure_ascii=False, indent=4)

# –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def calculate_level(user_id):
    user_stats = user_data.get(user_id, {"messages": 0, "voice_time": 0})
    messages = user_stats.get("messages", 0)
    voice_time = user_stats.get("voice_time", 0)

    current_level = 0
    for level, reqs in sorted(LEVELS.items()):
        if messages >= reqs["messages"] and voice_time >= reqs["voice_time"]:
            current_level = level
        else:
            break

    return current_level

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏
def calculate_metric_progress(current, required):
    return min(current / required, 1.0)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 100%

# –°–æ–±—ã—Ç–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.event
async def on_message(message):
    if message.author.bot:
        return

    user_id = message.author.id

    if user_id not in user_data:
        user_data[user_id] = {"messages": 0, "voice_time": 0, "last_voice_time": None}

    user_data[user_id]["messages"] += 1
    save_data()

    await bot.process_commands(message)

# –°–æ–±—ã—Ç–∏–µ: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@bot.event
async def on_voice_state_update(member, before, after):
    user_id = member.id

    if user_id not in user_data:
        user_data[user_id] = {"messages": 0, "voice_time": 0, "last_voice_time": None}

    if before.channel is None and after.channel is not None:
        user_data[user_id]["last_voice_time"] = time.time()
    elif before.channel is not None and after.channel is None:
        if user_data[user_id]["last_voice_time"]:
            time_spent = time.time() - user_data[user_id]["last_voice_time"]
            user_data[user_id]["voice_time"] += time_spent / 60  # –•—Ä–∞–Ω–∏–º –≤ –º–∏–Ω—É—Ç–∞—Ö
            user_data[user_id]["last_voice_time"] = None
    save_data()

# –ö–æ–º–∞–Ω–¥–∞: —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.tree.command(name="level", description="–£–∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
async def level(interaction: discord.Interaction, user: discord.User = None):
    user = user or interaction.user
    user_id = user.id

    if user_id not in user_data:
        await interaction.response.send_message(
            embed=discord.Embed(
                title="–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                description=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user.mention}. üò¢",
                color=discord.Color.red(),
            )
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    level = calculate_level(user_id)
    messages = user_data[user_id].get("messages", 0)
    voice_time = user_data[user_id].get("voice_time", 0)

    next_level = level + 1
    if next_level not in LEVELS:
        await interaction.response.send_message(
            embed=discord.Embed(
                title="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç",
                description=f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! üéâ",
                color=discord.Color.gold(),
            )
        )
        return

    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    req_messages = LEVELS[next_level]["messages"]
    req_voice_time = LEVELS[next_level]["voice_time"]

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    message_progress = calculate_metric_progress(messages, req_messages)
    voice_time_progress = calculate_metric_progress(voice_time, req_voice_time)

    # –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    total_progress = (message_progress + voice_time_progress) / 2

    # –û—Å—Ç–∞—Ç–æ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    xp_remaining_messages = max(0, req_messages - messages)
    xp_remaining_voice = max(0, req_voice_time - voice_time)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    bar_length = 20  # –î–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    filled_length = math.floor(bar_length * total_progress)
    progress_bar = "‚ñà" * filled_length + "-" * (bar_length - filled_length)

    # –ì–∏—Ñ–∫–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è
    gif_url = "https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExMWR5MXVmeXIwZHE4aGtueTRkaXI0aTkyYzZ6M3pqa25sbzczYWFqaiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/MDJ9IbxxvDUQM/giphy.gif"

    # –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –¥–ª—è —ç–º–±–µ–¥–∞
    embed_color = (
        discord.Color.green() if level < 3 else
        discord.Color.orange() if level < 10 else
        discord.Color.purple()
    )

    # –°–æ–∑–¥–∞–µ–º Embed
    embed = discord.Embed(
        title=f"üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} üéâ",
        description=(
            f"üìà **–£—Ä–æ–≤–µ–Ω—å**: **{level}**\n"
            f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ**: **{messages}/{req_messages}**\n"
            f"üéôÔ∏è **–í—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö**: **{voice_time:.2f}/{req_voice_time} –º–∏–Ω—É—Ç**\n"
            f"\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: \n"
            f"[{progress_bar}] {total_progress * 100:.2f}%\n\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å:\n"
            f" - **{xp_remaining_messages} —Å–æ–æ–±—â–µ–Ω–∏–π**\n"
            f" - **{xp_remaining_voice:.2f} –º–∏–Ω—É—Ç**\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ"
        ),
        color=embed_color,
    )
    embed.set_thumbnail(url=user.display_avatar.url)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
    embed.set_image(url=gif_url)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–∏—Ñ–∫–∏
    embed.set_footer(
        text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚ú®",
        icon_url="https://i.giphy.com/media/xTiTnxpQ3ghPiB2Hp6/giphy.gif",
    )

    await interaction.response.send_message(embed=embed)

# –°–æ–±—ã—Ç–∏–µ: –±–æ—Ç –≥–æ—Ç–æ–≤
@bot.event
async def on_ready():
    load_data()
    try:
        await bot.tree.sync()
        print("–ö–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        print("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        for command in bot.tree.get_commands():
            print(f"- {command.name}: {command.description}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
    print(f"–ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(TOKEN)
